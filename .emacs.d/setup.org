#+TITLE: emacs setup
#+AUTHOR: ysmiraak
* general
** init
[[https://www.gnu.org/software/emacs/][emacs 25]] is required.
put this in the =user-init-file= to tangle and load this setup.
#+BEGIN_SRC emacs-lisp :tangle no
  (package-initialize)
  (org-babel-load-file (expand-file-name "setup.org" user-emacs-directory))
#+END_SRC
the [[https://melpa.org/#/][melpa repo]] hosts the most update-to-date packages.
#+BEGIN_SRC emacs-lisp
  (push '("melpa" . "http://melpa.org/packages/") package-archives)
#+END_SRC
occasionally, some update is buggy.  just revert to the [[https://stable.melpa.org/#/][stable version]].
#+BEGIN_SRC emacs-lisp :tangle no
  (push '("melpa-stable" . "http://melpa-stable.milkbox.net/packages/") package-archives)
#+END_SRC
packages i use.
#+BEGIN_SRC emacs-lisp
  (customize-set-variable
   'package-selected-packages
   '(benchmark-init
     suggest dash s f bind-key delight
     exec-path-from-shell
     zenburn-theme powerline rainbow-delimiters unicode-fonts
     selectrum prescient selectrum-prescient  which-key
     centered-cursor-mode vimish-fold ace-window avy
     projectile magit undo-tree deadgrep
     smartparens expand-region region-bindings-mode visual-regexp multiple-cursors
     company company-prescient company-quickhelp yasnippet
     flyspell-correct flycheck flycheck-pos-tip
     hungry-delete aggressive-indent drag-stuff fix-word zzz-to-char
     eval-sexp-fu cider-eval-sexp-fu
     clojure-mode cider clj-refactor
     geiser ediprolog pasp-mode haskell-mode idris-mode
     rust-mode cargo flycheck-rust racer
     js2-mode indium json-mode pug-mode web-mode
     elpy rainbow-mode ess csv-mode htmlize
     markdown-mode auctex cdlatex company-auctex))
#+END_SRC
to install those packages, change =:tangle no= to =:tangle yes= for this code block, or manually execute the commands.
#+BEGIN_SRC emacs-lisp :tangle no
  (package-refresh-contents)
  (package-install-selected-packages)
#+END_SRC
some packages are autoloaded, namely only loaded when used.
others, since they are always used, are loaded during initialization.
if emacs takes too long to initialize, [[https://github.com/dholm/benchmark-init-el][benchmark-init]] helps to tell why.
#+BEGIN_SRC emacs-lisp :tangle no
  (benchmark-init/activate)
#+END_SRC
modern [[https://github.com/magnars/dash.el#installation][list]], [[https://github.com/magnars/s.el][string]], and [[https://github.com/rejeep/f.el][file]] libraries to make elisp usable.
[[https://github.com/jwiegley/use-package/blob/master/bind-key.el][bind-key]] simplifies mode-map management with =bind-keys=, =unbind-key=, and =describe-personal-keybindings=.
[[https://www.emacswiki.org/emacs/DelightedModes][delight]] keeps the mode-line clean.
#+BEGIN_SRC emacs-lisp
  (mapc #'require '(s f dash bind-key delight))
  (dash-enable-font-lock)
  (defun cset (&rest sym-vals)
    "customize each symbol to value in SYM-VALS."
    (-each (-partition-all 2 sym-vals)
      (-applify #'customize-set-variable)))
  (defun add-hooks (h &rest fs)
    "add all functions in FS to hook H in reverse."
    (--each (nreverse fs) (add-hook h it)))
  (defun unbind-keys (m &rest ks)
    "unbind all keys in KS from mode M."
    (--each ks (unbind-key it m)))
#+END_SRC
in this setup, each package is configured in this order.
- autoload
- bind global
- mode & hook
- activation & delight
- config
- bind local
- related
** system
for [[https://www.emacswiki.org/emacs/EmacsClient][emacsclient]].
#+BEGIN_SRC emacs-lisp
  (require 'server)
  (unless (server-running-p) (server-start))
#+END_SRC
for getting [[https://github.com/purcell/exec-path-from-shell][env]], dired (see =dired-use-ls-dired=), and fullscreen to work on [[https://www.emacswiki.org/emacs/MacOSTweaks][mac]].
#+BEGIN_SRC emacs-lisp
  (when (equal 'ns window-system)
    (exec-path-from-shell-initialize)
    (exec-path-from-shell-copy-envs '("PATH" "LANG" "LC_ALL" "EMAIL"))
    (cset 'insert-directory-program (executable-find "gls"))
    (bind-keys ("<C-s-f>" . toggle-frame-fullscreen) ("<C-s-268632070>" . toggle-frame-fullscreen))
    (toggle-frame-fullscreen))
  (with-eval-after-load 'tramp-sh
    (push 'tramp-own-remote-path tramp-remote-path))
#+END_SRC
** safety
to prevent custom from editing my =user-init-file=.
#+BEGIN_SRC emacs-lisp
  (cset 'custom-file (f-expand "custom.el" user-emacs-directory))
#+END_SRC
no lock.  no auto-save.  no backup.  cuz [[https://git-scm.com/][git]].
#+BEGIN_SRC emacs-lisp
  (cset 'create-lockfiles           nil
        'auto-save-default          nil
        'auto-save-list-file-prefix nil
        'make-backup-files          nil)
#+END_SRC
removes some safety measures.
they encourage recklessness.
#+BEGIN_SRC emacs-lisp
  (cset 'disabled-command-function nil
        'dired-recursive-deletes 'always
        'dired-recursive-copies  'always)
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
=suspend-frame= is only useful on text terminals;
alias to =eshell= otherwise.
and stick to =C-x C-z= only;
let =C-z= instead show what i wanna kill.
#+BEGIN_SRC emacs-lisp
  (bind-keys ("C-z" . list-processes))
  (when (display-graphic-p) (defalias 'suspend-frame #'eshell))
  (add-hooks 'eshell-mode-hook #'smartparens-mode #'company-idle-disable)
  (cset 'eshell-preoutput-filter-functions '(ansi-color-apply))
#+END_SRC
** theme
- simpler style
#+BEGIN_SRC emacs-lisp
  (cset 'uniquify-buffer-name-style 'post-forward
        'uniquify-min-dir-content   1
        'inhibit-startup-screen     t
        'initial-scratch-message    nil
        'tool-bar-mode              nil
        'menu-bar-mode              nil
        'scroll-bar-mode            nil
        'line-number-mode           t
        'column-number-mode         t
        'fringe-mode                4
        'ring-bell-function         'ignore)
#+END_SRC
- fancier face on graphic devices
#+BEGIN_SRC emacs-lisp
  (when (display-graphic-p)
    (add-hooks 'prog-mode-hook #'rainbow-delimiters-mode-enable)
    ;; (load-theme 'leuven t)
    (load-theme 'zenburn t)
    (powerline-center-theme)
    (cset 'powerline-display-hud nil)
    (set-face-attribute 'cursor nil :background "#DAA520")
    (set-face-attribute 'region nil :background "#242424")
    (set-face-attribute 'vertical-border nil :foreground "#656555")
    (global-hl-line-mode 1))
#+END_SRC
- cursor style
#+BEGIN_SRC emacs-lisp
  (cset 'blink-cursor-mode              nil
        'cursor-type                    '(bar . 3)
        'cursor-in-non-selected-windows 'hollow)
#+END_SRC
- never wrap lines
#+BEGIN_SRC emacs-lisp
  (bind-keys ("C-M-_" . toggle-truncate-lines)
             ("C-M--" . toggle-truncate-lines))
  (cset 'truncate-lines t)
#+END_SRC
- unicode fonts
#+BEGIN_SRC emacs-lisp :tangle no
  (require 'unicode-fonts)
  (unicode-fonts-setup)
#+END_SRC
** navigation
*** symbol
#+BEGIN_SRC emacs-lisp
  (selectrum-mode 1)
  (selectrum-prescient-mode 1)
  (prescient-persist-mode 1)
  (bind-keys ("C-M-z" . selectrum-repeat))
  (which-key-mode 1)
  (delight 'which-key-mode nil 'which-key)
  (global-eldoc-mode 1)
  (delight 'eldoc-mode nil 'eldoc)
  (unbind-keys prog-mode-map "C-M-q")
  (bind-keys ("C-M-q" . deadgrep))
#+END_SRC
*** buffer
#+BEGIN_SRC emacs-lisp
  (bind-keys ("C-x C-b" . ibuffer))
  (add-hooks 'ibuffer-mode-hook (-partial #'ibuffer-switch-to-saved-filter-groups "ysmiraak"))
  (cset 'ibuffer-saved-filter-groups
        '(("ysmiraak"
           ("emacs" (or (name . "^\\*scratch\\*$")
                        (name . "^\\*Messages\\*$")
                        (name . "^\\*Process List\\*$")))
           ("exwm"      (mode . exwm-mode))
           ("cider" (or (name . "^\\*cider")
                        (name . "^\\*nrepl")))
           ("help"  (or (mode . help-mode)
                        (mode . apropos-mode)
                        (mode . Info-mode)
                        (name . "^\\*Backtrace\\*$")))
           ("dired"     (mode . dired-mode))
           ("magit"     (name . "^\\magit"))
           ("tmp"       (name . "^\\*.*\\*$"))
           ("org"       (mode . org-mode))
           (""          (name . ""))))
        'ibuffer-show-empty-filter-groups nil
        'ibuffer-expert t)
#+END_SRC
*** position
|           | set       | get       |
|-----------+-----------+-----------|
| mark      | C-SPC     | C-u C-SPC |
| rectangle | C-x SPC   | C-x r y   |
| position  | C-x r SPC | C-x r j   |
| window    | C-x r w   | C-x r j   |
| bookmark  | C-x r b/m | C-x r l   |
#+BEGIN_SRC emacs-lisp
  (autoload 'centered-cursor-mode "centered-cursor-mode" nil t)
  (unbind-key "C-x v")
  (bind-keys ("C-x v v" . vimish-fold-avy)
             ("C-x v d" . vimish-fold-delete)
             ("C-x v c" . vimish-fold-delete-all)
             ("C-x v `" . vimish-fold-toggle-all)
             ("C-x o"   . ace-window)
             ("M-#"     . linum-mode)
             ("M-g g"   . avy-goto-line)
             ("M-g M-g" . avy-goto-line)
             ("M-\""    . avy-pop-mark)
             ("M-'"     . avy-goto-char-timer))
  (cset 'set-mark-command-repeat-pop t
        'avy-timeout-seconds 0.3)
#+END_SRC
*** project
#+BEGIN_SRC emacs-lisp
  (cset 'projectile-keymap-prefix (kbd "C-c p"))
  (projectile-mode 1)
  (defadvice projectile-project-root (around ignore-remote first activate)
    (unless (file-remote-p default-directory) ad-do-it))
  (delight 'projectile-mode '(:eval (format " [%s]" (projectile-project-name))) 'projectile)
  (cset 'projectile-switch-project-action 'projectile-dired
        'projectile-completion-system     'default)
  (bind-keys ("C-x g" . magit-status))
#+END_SRC
*** history
#+BEGIN_SRC emacs-lisp
  (global-undo-tree-mode 1)
  (bind-keys :map undo-tree-map ("C--" . undo-tree-undo))
  (delight 'undo-tree-mode nil 'undo-tree)
#+END_SRC
** editing
*** structure-based
with revised symmetrical bindings.
|   | C        | M        | C-M      |
|---+----------+----------+----------|
| a | line min | buff min | sexp min |
| e | line max | buff max | sexp max |
| f | char inc | word inc | sexp inc |
| b | char dec | word dec | sexp dec |
| n | line inc | sent inc | para inc |
| p | line dec | sent dec | para dec |
#+BEGIN_SRC emacs-lisp
  (require 'smartparens-config)
  (smartparens-global-mode 1)
  (delight 'smartparens-mode nil 'smartparens)
  (cset 'sp-navigate-reindent-after-up-in-string nil
        'sp-navigate-reindent-after-up           nil)
  (bind-keys ("M-a"   . beginning-of-buffer)
             ("M-e"   . end-of-buffer)
             ("M-n"   . forward-sentence)
             ("M-p"   . backward-sentence)
             ("C-M-n" . forward-paragraph)
             ("C-M-p" . backward-paragraph)
             :map smartparens-mode-map
             ("C-M-a" . sp-beginning-of-sexp)
             ("C-M-e" . sp-end-of-sexp)
             ("C-M-f" . sp-forward-parallel-sexp)
             ("C-M-b" . sp-backward-parallel-sexp)
             ;; ] right [ left, M down C-M up
             ("C-M-]" . sp-up-sexp)
             ("C-M-[" . sp-backward-up-sexp)
             ("M-]"   . sp-backward-down-sexp)
             ("M-["   . sp-down-sexp)
             ;; restructuring bindings
             ("M-)"   . sp-forward-slurp-sexp)
             ("M-("   . sp-backward-slurp-sexp)
             ("M-}"   . sp-forward-barf-sexp)
             ("M-{"   . sp-backward-barf-sexp)
             ("M->"   . sp-splice-sexp-killing-forward)
             ("M-<"   . sp-splice-sexp-killing-backward)
             ("C-M-u" . sp-raise-sexp)
             ("C-M-d" . sp-splice-sexp)
             ("C-M-h" . sp-rewrap-sexp)
             ("C-M-j" . sp-split-sexp)
             ("M-+"   . sp-join-sexp)
             ("M-*"   . sp-convolute-sexp)
             ;; behavior enhancements
             ("M-DEL"   . sp-backward-kill-word)
             ("M-d"     . sp-kill-word)
             ("C-k"     . sp-kill-hybrid-sexp)
             ("C-M-k"   . sp-kill-sexp)
             ("C-M-t"   . sp-transpose-sexp)
             ("C-x C-t" . sp-transpose-hybrid-sexp)
             ("M-@"     . sp-select-next-thing)
             ("C-M-@"   . sp-select-previous-thing-exchange))
  (show-smartparens-global-mode 1)
  (set-face-attribute 'sp-show-pair-match-face    nil :background "#181818" :foreground "#A41210" :weight 'bold)
  (set-face-attribute 'sp-show-pair-mismatch-face nil :background "#161616" :foreground "#003B6F" :weight 'black)
#+END_SRC
*** region-based
#+BEGIN_SRC emacs-lisp
  (bind-keys ("M-h" . er/expand-region))
  (require 'region-bindings-mode)
  (region-bindings-mode-enable)
  (bind-keys :map region-bindings-mode-map
             ("$" . flyspell-region)
             (";" . comment-or-uncomment-region)
             ("b" . comment-box)
             ("d" . delete-region)
             ("v" . vimish-fold)
             ("g" . keyboard-quit)
             ("i" . indent-region)
             ("k" . kill-region)
             ("l" . downcase-region)
             ("m" . mc/mark-all-in-region) ("M" . vr/mc-mark)
             ("n" . mc/edit-lines)
             ("r" . replace-string)        ("R" . vr/replace)
             ("s" . sort-lines)
             ("u" . upcase-region)
             ("w" . kill-ring-save))
#+END_SRC
*** batched
#+BEGIN_SRC emacs-lisp
  (bind-keys ("C-M-\\" . mc/mark-more-like-this-extended)
             ("C-M-%"  . vr/query-replace)
             ("M-%"    . query-replace))
  (when (display-graphic-p)
    (with-eval-after-load 'multiple-cursors
      (set-face-attribute 'mc/cursor-bar-face nil :background "#DAA520" :foreground "#242424")))
#+END_SRC
*** completion
- no abbrev
#+BEGIN_SRC emacs-lisp
  (cset 'save-abbrevs nil)
#+END_SRC
- symbol
#+BEGIN_SRC emacs-lisp
  (bind-keys ("M-/" . hippie-expand))
  (with-eval-after-load 'hippie-exp
    (cset 'hippie-expand-try-functions-list
          '(try-complete-file-name-partially
            try-complete-file-name
            try-expand-dabbrev
            try-expand-dabbrev-visible
            try-expand-dabbrev-all-buffers
            try-expand-dabbrev-from-kill
            try-expand-whole-kill
            try-complete-lisp-symbol-partially
            try-complete-lisp-symbol)))
  (global-company-mode 1)
  (company-quickhelp-mode 1)
  (delight 'company-mode nil 'company)
  (defun company-idle-disable ()
    "disable idle completion."
    (interactive)
    (setq-local company-idle-delay nil))
  (cset 'company-idle-delay                0.2
        'company-minimum-prefix-length     2
        'company-tooltip-align-annotations t
        'company-selection-wrap-around     t
        'company-quickhelp-delay           nil)
  (unbind-keys company-active-map "TAB" "<tab>")
  (bind-keys :map company-active-map ("M-h" . company-quickhelp-manual-begin)
             :map company-mode-map ("C-M-i" . company-complete))
  (company-prescient-mode 1)
#+END_SRC
- snippet
#+BEGIN_SRC emacs-lisp
  (yas-global-mode 1)
  (delight 'yas-minor-mode nil 'yasnippet)
#+END_SRC
*** checking
- spell
#+BEGIN_SRC emacs-lisp
  (bind-keys ("M-$" . flyspell-mode))
  (with-eval-after-load 'flyspell
    (delight 'flyspell-mode " $" 'flyspell)
    (unbind-keys flyspell-mode-map "C-M-i")
    (bind-keys :map flyspell-mode-map ("C-;" . flyspell-correct-wrapper))
    (cset 'ispell-program-name "aspell"))
#+END_SRC
- error
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'flycheck
    (flycheck-pos-tip-mode))
#+END_SRC
*** whitespace
#+BEGIN_SRC emacs-lisp
  (add-hooks 'before-save-hook #'whitespace-cleanup)
  (global-hungry-delete-mode 1)
  (delight 'hungry-delete-mode " d" 'hungry-delete)
  (cset 'require-final-newline t)
#+END_SRC
*** indentation
#+BEGIN_SRC emacs-lisp
  (global-aggressive-indent-mode 1)
  (delight 'aggressive-indent-mode " i" 'aggressive-indent)
  (cset 'indent-tabs-mode nil)
  (bind-keys :map smartparens-mode-map ("C-j" . newline-and-indent))
#+END_SRC
*** miscellaneous
#+BEGIN_SRC emacs-lisp
  (bind-keys ("<M-right>" . drag-stuff-right)
             ("<M-left>"  . drag-stuff-left)
             ("<M-down>"  . drag-stuff-down)
             ("<M-up>"    . drag-stuff-up)
             ("M-c" . fix-word-capitalize)
             ("M-l" . fix-word-downcase)
             ("M-u" . fix-word-upcase)
             ("M-z" . zzz-to-char))
#+END_SRC
** eval
to evaluate code interactively, i bind =M-RET= for region or sexp or line and =C-M-x= for defun or block.
this applies to all language-specific modes which offers the options.
#+BEGIN_SRC emacs-lisp
  (defmacro def-eval-dwim (name eval-region eval-last)
    "define NAME to interactively call either the EVAL-REGION
  function or the EVAL-LAST function, depending on `use-region-p'.
  both functions must be given as unquoted symbols."
    `(defun ,name ()
       ,(format "`%s' or `%s'" eval-region eval-last)
       (interactive)
       (call-interactively
        (if (use-region-p)
            (function ,eval-region)
          (function ,eval-last)))))
#+END_SRC
* lang
** elisp
#+BEGIN_SRC emacs-lisp
  (add-hooks 'eval-expression-minibuffer-setup-hook #'smartparens-mode)
  (def-eval-dwim eval-dwim:elisp eval-region eval-last-sexp)
  (--each '(emacs-lisp-mode-map lisp-interaction-mode-map)
    (unbind-keys it "C-M-q"))
  (bind-keys :map emacs-lisp-mode-map
             ("M-RET" . eval-dwim:elisp)
             :map lisp-interaction-mode-map
             ("M-RET" . eval-print-last-sexp))
  (require 'eval-sexp-fu)
  (cset 'eval-sexp-fu-flash-face       'sp-show-pair-match-face
        'eval-sexp-fu-flash-error-face 'sp-show-pair-mismatch-face
        'eval-sexp-fu-flash-error-duration 0.4
        'eval-sexp-fu-flash-duration       0.4)
  (defun eval-sexp-fu-flash-mode-disable ()
    "disable idle completion."
    (interactive)
    (setq-local eval-sexp-fu-flash-mode nil))
#+END_SRC
** clojure
#+BEGIN_SRC emacs-lisp
  (push 'cider-repl-mode aggressive-indent-excluded-modes)
  (with-eval-after-load 'cider
    (cset 'cider-doc-xref-regexp "\\[\\[\\(?1:[^[:space:]]+\\)]]"
          'cider-font-lock-dynamically t
          'nrepl-use-ssh-fallback-for-remote-hosts t
          'cljr-suppress-middleware-warnings t
          'cljr-add-ns-to-blank-clj-files nil)
    (def-eval-dwim eval-dwim:cider cider-eval-region cider-eval-last-sexp)
    (unbind-keys cider-mode-map "C-M-i")
    (bind-keys :map cider-mode-map ("M-RET" . eval-dwim:cider)
               :map cider-repl-mode-map ("C-c M-o" . cider-repl-clear-buffer))
    (require 'cider-eval-sexp-fu))
  (--each '(clojure-mode-hook cider-repl-mode-hook)
    (add-hooks it #'clj-refactor-mode))
  (delight 'clj-refactor-mode nil 'clj-refactor)
  (with-eval-after-load 'clj-refactor
    (cljr-add-keybindings-with-prefix "C-c C-m"))
#+END_SRC
** scheme
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'geiser
    (cset 'geiser-active-implementations '(chez))
    (def-eval-dwim eval-dwim:geiser geiser-eval-region geiser-eval-last-sexp)
    (bind-keys :map scheme-mode-map ("M-RET" . eval-dwim:geiser)))
#+END_SRC
** prolog
#+BEGIN_SRC emacs-lisp
  (push '("\\.pl$" . prolog-mode) auto-mode-alist)
  (with-eval-after-load 'prolog
    (unbind-keys prolog-mode-map "M-a" "M-e")
    (bind-keys :map prolog-mode-map ("M-RET" . ediprolog-dwim)))
#+END_SRC
** haskell
#+BEGIN_SRC emacs-lisp
  (add-hooks 'haskell-mode-hook #'interactive-haskell-mode)
  (with-eval-after-load 'haskell-indentation
    (unbind-keys haskell-indentation-mode-map ";"))
#+END_SRC
** idris
#+BEGIN_SRC emacs-lisp
  (push 'idris-mode aggressive-indent-excluded-modes)
  (with-eval-after-load 'idris-mode
    (bind-keys :map idris-mode-map
               ("M-RET"   . idris-load-file)
               ("C-c C-q" . idris-quit)
               :map idris-repl-mode-map
               ("C-c C-q" . idris-quit)
               ("C-c C-z" . ace-window)))
#+END_SRC
** agda
#+BEGIN_SRC emacs-lisp :tangle no
  (ignore-errors
    (load-file (let ((coding-system-for-read 'utf-8))
                 (shell-command-to-string "agda-mode locate"))))
#+END_SRC
** rust
#+BEGIN_SRC emacs-lisp
  (add-hooks 'rust-mode-hook
             #'flycheck-mode
             #'flycheck-rust-setup
             #'cargo-minor-mode
             #'racer-mode)
#+END_SRC
** r
#+BEGIN_SRC emacs-lisp
  (add-hooks 'inferior-ess-mode-hook #'smartparens-mode)
  (with-eval-after-load 'ess-mode
    (def-eval-dwim eval-dwim:ess ess-eval-region ess-eval-line)
    (bind-keys :map ess-mode-map
               ("M-RET" . eval-dwim:ess)
               ("C-M-x" . ess-eval-paragraph)))
#+END_SRC
** python
#+BEGIN_SRC emacs-lisp
  (add-hooks 'elpy-mode-hook #'eval-sexp-fu-flash-mode-disable)
  (with-eval-after-load 'python
    (cset 'python-shell-interpreter "python3"
          'elpy-modules
          '(elpy-module-sane-defaults
            ;; elpy-module-flymake
            ;; elpy-module-highlight-indentation
            elpy-module-pyvenv
            ;; elpy-module-django
            elpy-module-yasnippet
            elpy-module-company
            elpy-module-eldoc))
    (def-eval-dwim eval-dwim:elpy elpy-shell-send-region-or-buffer elpy-shell-send-statement)
    (bind-keys :map python-mode-map
               ("M-RET" . eval-dwim:elpy)
               ("C-M-x" . elpy-shell-send-group))
    (unbind-keys python-mode-map "DEL")
    (elpy-enable))
#+END_SRC
** javascript
#+BEGIN_SRC emacs-lisp
  (push '("\\.json\\'" . json-mode) auto-mode-alist)
  (push '("\\.js\\'"   .  js2-mode) auto-mode-alist)
  (add-hooks 'js2-mode-hook #'indium-interaction-mode)
  (with-eval-after-load 'js2-mode
    (delight 'js2-mode "JS" :major)
    (delight 'indium-interaction-mode nil 'indium-interaction)
    (require 'indium)
    (def-eval-dwim eval-dwim:indium indium-eval-region indium-eval-last-node)
    (bind-keys :map indium-interaction-mode-map
               ("M-RET"   . eval-dwim:indium)
               ("C-c M-j" . indium-launch)
               :map indium-repl-mode-map
               ("C-c M-o" . indium-repl-clear-output)))
#+END_SRC
** web
#+BEGIN_SRC emacs-lisp
  (push '("\\.html?\\'" . web-mode) auto-mode-alist)
  (with-eval-after-load 'web-mode (unbind-keys web-mode-map "C-M-q"))
  (with-eval-after-load 'css-mode (unbind-keys css-mode-map "C-M-q"))
  (cset 'web-mode-enable-auto-quoting nil
        'web-mode-markup-indent-offset 2)
  (push 'pug-mode aggressive-indent-excluded-modes)
  (cset 'pug-tab-width 4)
#+END_SRC
** markdown
#+BEGIN_SRC emacs-lisp
  (push '("README\\.md\\'" . gfm-mode)      auto-mode-alist)
  (push '("\\.[Rr]md\\'"   . markdown-mode) auto-mode-alist)
  (with-eval-after-load 'markdown-mode
    (cset 'markdown-enable-math t)
    (unbind-keys markdown-mode-map "DEL"))
#+END_SRC
** tex
#+BEGIN_SRC emacs-lisp
  (add-hooks 'LaTeX-mode-hook
             #'flyspell-mode
             #'flycheck-mode
             #'turn-on-cdlatex
             #'turn-on-reftex)
  (with-eval-after-load 'tex
    (push '("pdflatexmk" "latexmk -pdf -pdflatex='pdflatex -interaction=nonstopmode -shell-escape' %s"
            TeX-run-TeX nil t :help "run latexmk on file with pdflatex")
          TeX-command-list)
    (push '("xelatexmk" "latexmk -pdf -pdflatex='xelatex -interaction=nonstopmode -shell-escape' %s"
            TeX-run-TeX nil t :help "run latexmk on file with xelatex")
          TeX-command-list)
    (cset 'TeX-auto-save           t
          'TeX-parse-self          t
          'reftex-plug-into-AUCTeX t)
    (with-eval-after-load 'company
      (company-auctex-init)))
  (with-eval-after-load 'cdlatex
    (unbind-keys cdlatex-mode-map "(" "{" "[" "|" "<"))
#+END_SRC
** org
#+BEGIN_SRC emacs-lisp
  (add-hooks 'org-mode-hook #'turn-on-org-cdlatex)
  (delight 'org-cdlatex-mode nil 'org)
  (with-eval-after-load 'org
    (cset 'org-adapt-indentation                  nil
          'org-log-done                           'time
          'org-src-fontify-natively               t
          'org-latex-hyperref-template            nil
          'org-latex-create-formula-image-program 'imagemagick
          'org-latex-listings                     'minted
          'org-latex-pdf-process '("latexmk -pdf -pdflatex='xelatex -interaction=nonstopmode -shell-escape' %f")
          'org-latex-compiler "xelatex")
    (push '("" "fontspec" t ("xelatex")) org-latex-default-packages-alist)
    (unbind-keys org-mode-map "M-h" "M-a" "M-e" "M-{" "M-}")
    (bind-keys :map org-mode-map
               ("M-n"     . org-forward-sentence)
               ("M-p"     . org-backward-sentence)
               ("C-M-n"   . org-forward-element)
               ("C-M-p"   . org-backward-element)))
  (with-eval-after-load 'ox-beamer
    (defalias 'org-beamer-bold 'org-latex-bold)
    (cset 'org-beamer-outline-frame-title "outline"))
#+END_SRC
* summary
default ~customized~ +overwritten+
** chord
ctrl does not work with uppercase on text terminals.
meta does but i do not need those bindings yet.
- dead on terminal: []
- forced translate: [target]
| <7>     | <36>                                 | <60>                                                         | <60>                                                         |
| ------- | ------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |
|         | C-                                   | M-                                                           | C-M-                                                         |
|---------+--------------------------------------+--------------------------------------------------------------+--------------------------------------------------------------|
| DEL     | [DEL]                                | ~sp-backward-kill-word~ +backward-kill-word+                 | [C-M-h]                                                      |
| TAB     | [TAB]                                | [C-M-i]                                                      | [C-M-i]                                                      |
| RET     | [RET]                                | ~eval-dwim~                                                  | [M-RET]                                                      |
| SPC     | [C-@]                                | just-one-space                                               | [M-SPC]                                                      |
| <up>    | <up>                                 | ~drag-stuff-up~                                              | [ESC <up>]                                                   |
| <left>  | ~[]~ +left-word+                     | ~drag-stuff-left~ +backward-word+                            | [ESC <left>]                                                 |
| <down>  | <down>                               | ~drag-stuff-down~                                            | [ESC <down>]                                                 |
| <right> | ~[]~ +right-word+                    | ~drag-stuff-right~ +forward-word+                            | [ESC <right>]                                                |
|---------+--------------------------------------+--------------------------------------------------------------+--------------------------------------------------------------|
| 1       | []                                   | digit-argument 1                                             | [M-1]                                                        |
| 2       | []                                   | digit-argument 2                                             | [M-2]                                                        |
| 3       | []                                   | digit-argument 3                                             | [M-3]                                                        |
| 4       | []                                   | digit-argument 4                                             | [M-4]                                                        |
| 5       | []                                   | digit-argument 5                                             | [M-5]                                                        |
| 6       | []                                   | digit-argument 6                                             | [M-6]                                                        |
| 7       | []                                   | digit-argument 7                                             | [M-7]                                                        |
| 8       | []                                   | digit-argument 8                                             | [M-8]                                                        |
| 9       | []                                   | digit-argument 9                                             | [M-9]                                                        |
| 0       | []                                   | digit-argument 0                                             | [M-0]                                                        |
|---------+--------------------------------------+--------------------------------------------------------------+--------------------------------------------------------------|
| !       | []                                   | shell-command                                                |                                                              |
| @       | set-mark-command                     | ~sp-select-next-thing~ +mark-word+                           | ~sp-select-previous-thing-exchange~  +mark-sexp+             |
| #       | []                                   | ~linum-mode~                                                 |                                                              |
| $       | []                                   | ~flyspell-mode~ +ispell-word+                                |                                                              |
| %       | []                                   | query-replace                                                | ~vr/query-replace~ +query-replace-regexp+                    |
| ^       |                                      | delete-indentation                                           |                                                              |
| &       | []                                   | async-shell-command                                          |                                                              |
| *       | []                                   | ~sp-convolute-sexp~                                          |                                                              |
| (       | []                                   | ~sp-backward-slurp-sexp~ +insert-parentheses+                |                                                              |
| )       | []                                   | ~sp-forward-slurp-sexp~ +move-past-close-and-reindent+       |                                                              |
|---------+--------------------------------------+--------------------------------------------------------------+--------------------------------------------------------------|
| -       | [C-_]                                | negative-argument                                            | [C-M-_]                                                      |
| =       | []                                   | count-words-region                                           | [M-=]                                                        |
| [       | [ESC-]                               | ~sp-down-sexp~                                               | ~sp-backward-up-sexp~                                        |
| ]       | abort-recursive-edit                 | ~sp-backward-down-sexp~                                      | ~sp-up-sexp~                                                 |
| ;       | []                                   | comment-dwim                                                 | [M-;]                                                        |
| '       | []                                   | ~avy-goto-char-timer~ +abbrev-prefix-mark+                   | [M-']                                                        |
| \       | toggle-input-method                  | delete-horizontal-space                                      | ~mc/mark-more-like-this-extended~ +indent-region+            |
| `       | []                                   | tmm-menubar                                                  | [M-`]                                                        |
| ,       | []                                   | xref-pop-marker-stack                                        | [M-,]                                                        |
| .       | []                                   | xref-find-definitions                                        | [M-.]                                                        |
| /       | []                                   | ~hippie-expand~ +dabbrev-expand+                             | [M-/]                                                        |
|---------+--------------------------------------+--------------------------------------------------------------+--------------------------------------------------------------|
| _       | ~undo-tree-undo~ +undo+              | ~undo-tree-redo~                                             | ~toggle-truncate-lines~ +negative-argument+                  |
| +       | []                                   | ~sp-join-sexp~                                               |                                                              |
| {       | [C-[]                                | ~sp-backward-barf-sexp~ +backward-paragraph+                 |                                                              |
| }       | [C-]]                                | ~sp-forward-barf-sexp~ +forward-paragraph+                   |                                                              |
| :       | []                                   | eval-expression                                              |                                                              |
| "       | []                                   | ~avy-pop-mark~                                               |                                                              |
| \mid    | [C-\]                                | shell-command-on-region                                      |                                                              |
| ~       | []                                   | not-modified                                                 |                                                              |
| <       | []                                   | ~sp-splice-sexp-killing-backward~ +beginning-of-buffer+      |                                                              |
| >       | []                                   | ~sp-splice-sexp-killing-forward~ +end-of-buffer+             |                                                              |
| ?       | []                                   | xref-find-references                                         |                                                              |
|---------+--------------------------------------+--------------------------------------------------------------+--------------------------------------------------------------|
| a       | move-beginning-of-line               | ~beginning-of-buffer~ +backward-sentence+                    | ~sp-beginning-of-sexp~ +beginning-of-defun+                  |
| b       | backward-char                        | backward-word                                                | ~sp-backward-parallel-sexp~ +backward-sexp+                  |
| c       | [C-c-]                               | ~fix-word-capitalize~ +capitalize-word+                      | exit-recursive-edit                                          |
| d       | delete-char                          | ~sp-kill-word~ +kill-word+                                   | ~sp-splice-sexp~ +down-list+                                 |
| e       | move-end-of-line                     | ~end-of-buffer~ +forward-sentence+                           | ~sp-end-of-sexp~ +end-of-defun+                              |
| f       | forward-char                         | forward-word                                                 | ~sp-forward-parallel-sexp~ +forward-sexp+                    |
| g       | keyboard-quit                        | [M-g-]                                                       | []                                                           |
| h       | [C-h-]                               | ~er/expand-region~ +mark-paragraph+                          | ~sp-rewrap-sexp~ +mark-defun+                                |
| i       | [TAB]                                | tab-to-tab-stop                                              | ~company-complete~ +completion-at-point+                     |
| j       | newline-and-indent                   | indent-new-comment-line                                      | ~sp-split-sexp~ +indent-new-comment-line+                    |
| k       | ~sp-kill-hybrid-sexp~ +kill-line+    | kill-sentence                                                | ~sp-kill-sexp~ +kill-sexp+                                   |
| l       | recenter-top-bottom                  | ~fix-word-downcase~ +downcase-word+                          | reposition-window                                            |
| m       | [RET]                                | back-to-indentation                                          | [M-RET]                                                      |
| n       | next-line                            | ~forward-sentence~                                           | ~forward-paragraph~ +forward-list+                           |
| o       | open-line                            | [M-o-]                                                       | split-line                                                   |
| p       | previous-line                        | ~backward-sentence~                                          | ~backward-paragraph~ +backward-list+                         |
| q       | quoted-insert                        | fill-paragraph                                               | ~deadgrep~                                                   |
| r       | isearch-backward                     | move-to-window-line-top-bottom                               | isearch-backward-regexp                                      |
| s       | isearch-forward                      | [M-s-]                                                       | isearch-forward-regexp                                       |
| t       | transpose-chars                      | transpose-words                                              | ~sp-transpose-sexp~ +transpose-sexps+                        |
| u       | universal-argument                   | ~fix-word-upcase~ +upcase-word+                              | ~sp-raise-sexp~ +backward-up-list+                           |
| v       | scroll-up-command                    | scroll-down-command                                          | scroll-other-window                                          |
| w       | kill-region                          | kill-ring-save                                               | append-next-kill                                             |
| x       | [C-x-]                               | execute-extended-command                                     | eval-defun                                                   |
| y       | yank                                 | yank-pop                                                     |                                                              |
| z       | ~list-processes~ +suspend-frame+     | ~zzz-to-char~ +zap-to-char+                                  | ~selectrum-repeat~                                           |
** prefixed
incomplete.
| <11>        | <32>                             | <32>                             |
| ----------- | -------------------------------- | -------------------------------- |
| C-h S       | info-lookup-symbol               |                                  |
| C-h a       | apropos-command                  |                                  |
| C-h b       | describe-bindings                |                                  |
| C-h f       | describe-function                |                                  |
| C-h i       | info                             |                                  |
| C-h r       | info-emacs-manual                |                                  |
| C-h v       | describe-variable                |                                  |
| C-x C-SPC   | pop-global-mark                  |                                  |
| C-x C-b     | ~ibuffer~                        | +list-buffers+                   |
| C-x C-f     | find-file                        |                                  |
| C-x C-t     | ~sp-transpose-hybrid-sexp~       | +transpose-lines+                |
| C-x b       | switch-to-buffer                 |                                  |
| C-x f       | set-fill-column                  |                                  |
| C-x g       | ~magit-status~                   |                                  |
| C-x l       | count-lines-page                 |                                  |
| C-x o       | ~ace-window~                     | +other-window+                   |
| C-x r b     | bookmark-jump                    |                                  |
| C-x u       | ~undo-tree-visualize~            |                                  |
| C-x z       | repeat                           |                                  |
| M-g g       | ~avy-goto-line~                  | +goto-line+                      |
